<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en" xml:lang="en">
<head>
<title>6 The Jack OS API</title>
<meta content="text/html; charset=utf-8" http-equiv="default-style"/>
<link href="../styles/stylesheet.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:28e15094-8b6c-42d2-9184-6ba334c47321" name="Adept.expected.resource"/>
</head>
<body epub:type="backmatter">
<div class="body">
<p class="sp"> </p>
<section epub:type="appendix" role="doc-appendix">
<header>
<h1 class="BMH"><span aria-label="317" id="pg_317" role="doc-pagebreak"/><samp class="SANS_Helvetica_LT_Std_Bold_B_11">Appendix 6: The Jack OS API</samp></h1>
</header>
<p class="noindent">The Jack language is supported by eight standard classes that provide basic OS services like memory allocation, mathematical functions, input capturing, and output rendering. This appendix documents the API of these classes.</p>
<section epub:type="division">
<h2 class="head a-head"><b>Math</b></h2>
<p class="noindent">This class provides commonly needed mathematical functions.</p>
<ul class="no-bullet">
<li class="ULF"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">multiply(int</samp> <samp class="SANS_Consolas_Regular_11">x,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">y)</samp>: Returns the product of <samp class="SANS_Consolas_Regular_11">x</samp> and <samp class="SANS_Consolas_Regular_11">y</samp>. When a Jack compiler detects the multiplication operator <samp class="SANS_Consolas_Regular_11">*</samp> in the program’s code, it handles it by invoking this function. Thus the Jack expressions <samp class="SANS_Consolas_Regular_11">x</samp> <samp class="SANS_Consolas_Regular_11">*</samp> <samp class="SANS_Consolas_Regular_11">y</samp> and the function call <samp class="SANS_Consolas_Regular_11">Math.mul</samp><samp class="SANS_Consolas_Regular_11">tiply(x,y)</samp> return the same value.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">divide(int</samp> <samp class="SANS_Consolas_Regular_11">x,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">y)</samp>: Returns the integer part of <samp class="SANS_Consolas_Regular_11">x</samp> <samp class="SANS_Consolas_Regular_11">/</samp> <samp class="SANS_Consolas_Regular_11">y</samp>. When a Jack compiler detects the division operator <samp class="SANS_Consolas_Regular_11">/</samp> in the program’s code, it handles it by invoking this function. Thus the Jack expressions <samp class="SANS_Consolas_Regular_11">x</samp> <samp class="SANS_Consolas_Regular_11">/</samp> <samp class="SANS_Consolas_Regular_11">y</samp> and the function call <samp class="SANS_Consolas_Regular_11">Math.divide(x,y)</samp> return the same value.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">min(int</samp> <samp class="SANS_Consolas_Regular_11">x,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">y)</samp>: Returns the minimum of <samp class="SANS_Consolas_Regular_11">x</samp> and <samp class="SANS_Consolas_Regular_11">y</samp>.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">max(int</samp> <samp class="SANS_Consolas_Regular_11">x,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">y)</samp>: Returns the maximum of <samp class="SANS_Consolas_Regular_11">x</samp> and <samp class="SANS_Consolas_Regular_11">y</samp>.</li>
<li class="UL2"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">sqrt(int</samp> <samp class="SANS_Consolas_Regular_11">x)</samp>: Returns the integer part of the square root of <samp class="SANS_Consolas_Regular_11">x</samp>.</li>
</ul>
</section>
<section epub:type="division">
<h2 class="head a-head"><b>String</b></h2>
<p class="noindent">This class represents strings of <samp class="SANS_Consolas_Regular_11">char</samp> values and provides commonly needed string processing services.</p>
<ul class="no-bullet">
<li class="ULF"><samp class="SANS_Consolas_Regular_11">constructor</samp> <samp class="SANS_Consolas_Regular_11">String</samp> <samp class="SANS_Consolas_Regular_11">new(int</samp> <samp class="SANS_Consolas_Regular_11">maxLength)</samp>: Constructs a new empty string with a maximum length of <samp class="SANS_Consolas_Regular_11">maxLength</samp> and initial length of 0.</li>
<li class="UL"><span aria-label="318" id="pg_318" role="doc-pagebreak"/><samp class="SANS_Consolas_Regular_11">method</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">dispose()</samp>: Disposes this string.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">method</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">length()</samp>: Returns the number of characters in this string.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">method</samp> <samp class="SANS_Consolas_Regular_11">char</samp> <samp class="SANS_Consolas_Regular_11">charAt(int</samp> <samp class="SANS_Consolas_Regular_11">i)</samp>: Returns the character at the <samp class="SANS_Consolas_Regular_11">i</samp>-th location of this string.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">method</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">setCharAt(int</samp> <samp class="SANS_Consolas_Regular_11">i,</samp> <samp class="SANS_Consolas_Regular_11">char</samp> <samp class="SANS_Consolas_Regular_11">c)</samp>: Sets the character at the <samp class="SANS_Consolas_Regular_11">i</samp>-th location of this string to <samp class="SANS_Consolas_Regular_11">c</samp>.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">method</samp> <samp class="SANS_Consolas_Regular_11">String</samp> <samp class="SANS_Consolas_Regular_11">appendChar(char</samp> <samp class="SANS_Consolas_Regular_11">c)</samp>: Appends <samp class="SANS_Consolas_Regular_11">c</samp> to this string’s end and returns this string.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">method</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">eraseLastChar()</samp>: Erases the last character from this string.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">method</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">intValue()</samp>: Returns the integer value of this string until a non-digit character is detected.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">method</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">setInt(int</samp> <samp class="SANS_Consolas_Regular_11">val)</samp>: Sets this string to hold a representation of the given value.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">char</samp> <samp class="SANS_Consolas_Regular_11">backSpace()</samp>: Returns the backspace character.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">char</samp> <samp class="SANS_Consolas_Regular_11">doubleQuote()</samp>: Returns the double quote character.</li>
<li class="UL2"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">char</samp> <samp class="SANS_Consolas_Regular_11">newLine()</samp>: Returns the newline character.</li>
</ul>
</section>
<section epub:type="division">
<h2 class="head a-head"><b>Array</b></h2>
<p class="noindent">In the Jack language, arrays are implemented as instances of the OS class <samp class="SANS_Consolas_Regular_11">Array</samp>. Once declared, the array elements can be accessed using the syntax <samp class="SANS_Consolas_Regular_11">arr[i]</samp>. Jack arrays are not typed: each array element can hold a primitive data type or an object type, and different elements in the same array can have different types.</p>
<ul class="no-bullet">
<li class="ULF"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">Array</samp> <samp class="SANS_Consolas_Regular_11">new(int</samp> <samp class="SANS_Consolas_Regular_11">size)</samp>: Constructs a new array of the given size.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">method</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">dispose()</samp>: Disposes this array.</li>
</ul>
</section>
<section epub:type="division">
<h2 class="head a-head"><b>Output</b></h2>
<p class="noindent">This class provides functions for displaying characters. It assumes a character-oriented screen consisting of 23 rows (indexed 0<span class="ellipsis">…</span>22, top to bottom) of 64 characters each (indexed 0<span class="ellipsis">…</span>63, left to right). The top-left character location on the screen is indexed (0,0). Each character is displayed by rendering on the screen a rectangular image 11 pixels high and 8 pixels wide (which includes margins for character spacing and line spacing). If needed, the bitmap images (“font”) of all the characters can be found by inspecting the given code of the <samp class="SANS_Consolas_Regular_11">Output</samp> class. A visible cursor, implemented as a small filled square, indicates where the next character will be displayed.</p>
<ul class="no-bullet">
<li class="ULF"><span aria-label="319" id="pg_319" role="doc-pagebreak"/><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">moveCursor(int</samp> <samp class="SANS_Consolas_Regular_11">i,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">j)</samp>: Moves the cursor to the <samp class="SANS_Consolas_Regular_11">j</samp>-th column of the <samp class="SANS_Consolas_Regular_11">i</samp>-th row and overrides the character displayed there.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">printChar(char</samp> <samp class="SANS_Consolas_Regular_11">c)</samp>: Displays the character at the cursor location and advances the cursor one column forward.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">printString(String</samp> <samp class="SANS_Consolas_Regular_11">s)</samp>: Displays the string starting at the cursor location and advances the cursor appropriately.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">printInt(int</samp> <samp class="SANS_Consolas_Regular_11">i)</samp>: Displays the integer starting at the cursor location and advances the cursor appropriately.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">println()</samp>: Advances the cursor to the beginning of the next line.</li>
<li class="UL2"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">backSpace()</samp>: Moves the cursor one column back.</li>
</ul>
</section>
<section epub:type="division">
<h2 class="head a-head"><b>Screen</b></h2>
<p class="noindent">This class provides functions for displaying graphical shapes on the screen. The Hack physical screen consists of 256 rows (indexed 0<span class="ellipsis">…</span>255, top to bottom) of 512 pixels each (indexed 0<span class="ellipsis">…</span>511, left to right). The top-left pixel on the screen is indexed (0,0).</p>
<ul class="no-bullet">
<li class="ULF"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">clearScreen()</samp>: Erases the entire screen.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">setColor(boolean</samp> <samp class="SANS_Consolas_Regular_11">b)</samp>: Sets the current color. This color will be used in all the subsequent <samp class="SANS_Consolas_Regular_11">draw</samp><i>Xxx</i> function calls. Black is represented by <samp class="SANS_Consolas_Regular_11">true</samp>, white by <samp class="SANS_Consolas_Regular_11">false</samp>.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">drawPixel(int</samp> <samp class="SANS_Consolas_Regular_11">x,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">y)</samp>: Draws the (<samp class="SANS_Consolas_Regular_11">x,y</samp>) pixel using the current color.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">drawLine(int</samp> <samp class="SANS_Consolas_Regular_11">x1,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">y1,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">x2,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">y2)</samp>: Draws a line from pixel (<samp class="SANS_Consolas_Regular_11">x1,y1</samp>) to pixel (<samp class="SANS_Consolas_Regular_11">x2,y2</samp>) using the current color.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">drawRectangle(int</samp> <samp class="SANS_Consolas_Regular_11">x1,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">y1,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">x2,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">y2)</samp>: Draws a filled rectangle whose top-left corner is (<samp class="SANS_Consolas_Regular_11">x1,y1</samp>) and bottom-right corner is (<samp class="SANS_Consolas_Regular_11">x2,y2</samp>) using the current color.</li>
<li class="UL2"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">drawCircle(int</samp> <samp class="SANS_Consolas_Regular_11">x,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">y,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">r)</samp>: Draws a filled circle of radius <samp class="SANS_Consolas_Regular_11">r</samp> <span class="symb">≤</span> 181 around (<samp class="SANS_Consolas_Regular_11">x,y</samp>) using the current color.</li>
</ul>
</section>
<section epub:type="division">
<h2 class="head a-head"><b>Keyboard</b></h2>
<p class="noindent">This class provides functions for reading inputs from a standard keyboard.</p>
<ul class="no-bullet">
<li class="ULF"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">char</samp> <samp class="SANS_Consolas_Regular_11">keyPressed()</samp>: Returns the character of the currently pressed key on the keyboard; if no key is currently pressed, returns 0. Recognizes all the values in the Hack character set (see appendix 5). These include the characters <samp class="SANS_Consolas_Regular_11">newLine</samp> (128, return <span aria-label="320" id="pg_320" role="doc-pagebreak"/>value of <samp class="SANS_Consolas_Regular_11">String.newLine()</samp>), <samp class="SANS_Consolas_Regular_11">backSpace</samp> (129, return value of <samp class="SANS_Consolas_Regular_11">String.backSpace</samp> <samp class="SANS_Consolas_Regular_11">()</samp>), <samp class="SANS_Consolas_Regular_11">leftArrow</samp> (130), <samp class="SANS_Consolas_Regular_11">upArrow</samp> (131), <samp class="SANS_Consolas_Regular_11">rightArrow</samp> (132), <samp class="SANS_Consolas_Regular_11">downArrow</samp> (133), <samp class="SANS_Consolas_Regular_11">home</samp> (134), <samp class="SANS_Consolas_Regular_11">end</samp> (135), <samp class="SANS_Consolas_Regular_11">pageUp</samp> (136), <samp class="SANS_Consolas_Regular_11">pageDown</samp> (137), <samp class="SANS_Consolas_Regular_11">insert</samp> (138), <samp class="SANS_Consolas_Regular_11">delete</samp> (139), <samp class="SANS_Consolas_Regular_11">esc</samp> (140), and <samp class="SANS_Consolas_Regular_11">f1</samp>–<samp class="SANS_Consolas_Regular_11">f12</samp> (141–152).</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">char</samp> <samp class="SANS_Consolas_Regular_11">readChar()</samp>: Waits until a keyboard key is pressed and released, then displays the corresponding character on the screen and returns the character.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">String</samp> <samp class="SANS_Consolas_Regular_11">readLine(String</samp> <samp class="SANS_Consolas_Regular_11">message)</samp>: Displays the message, reads from the keyboard the entered string of characters until a <samp class="SANS_Consolas_Regular_11">newLine</samp> character is detected, displays the string, and returns the string. Also handles user backspaces.</li>
<li class="UL2"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">readInt(String</samp> <samp class="SANS_Consolas_Regular_11">message)</samp>: Displays the message, reads from the keyboard the entered string of characters until a <samp class="SANS_Consolas_Regular_11">newLine</samp> character is detected, displays the string on the screen, and returns its integer value until the first non-digit character in the entered string is detected. Also handles user backspaces.</li>
</ul>
</section>
<section epub:type="division">
<h2 class="head a-head"><b>Memory</b></h2>
<p class="noindent">This class provides memory management services. The Hack RAM consists of 32,768 words, each holding a 16-bit binary number.</p>
<ul class="no-bullet">
<li class="ULF"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">peek</samp><samp class="SANS_Consolas_Regular_11">(int</samp> <samp class="SANS_Consolas_Regular_11">address)</samp>: Returns the value of <samp class="SANS_Consolas_Regular_11-SC">RAM[address]</samp>.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">poke(int</samp> <samp class="SANS_Consolas_Regular_11">address,</samp> <samp class="SANS_Consolas_Regular_11">int</samp> <samp class="SANS_Consolas_Regular_11">value)</samp>: Sets <samp class="SANS_Consolas_Regular_11-SC">RAM[address]</samp> to the given <samp class="SANS_Consolas_Regular_11">value</samp>.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">Array</samp> <samp class="SANS_Consolas_Regular_11">alloc(int</samp> <samp class="SANS_Consolas_Regular_11">size)</samp>: Finds an available RAM block of the given <samp class="SANS_Consolas_Regular_11">size</samp> and returns its base address.</li>
<li class="UL2"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">deAlloc(Array</samp> <samp class="SANS_Consolas_Regular_11">o)</samp>: Deallocates the given object, which is cast as an array. In other words, makes the RAM block that starts in this address available for future memory allocations.</li>
</ul>
</section>
<section epub:type="division">
<h2 class="head a-head"><b>Sys</b></h2>
<p class="noindent">This class provides basic program execution services.</p>
<ul class="no-bullet">
<li class="ULF"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">halt()</samp>: Halts the program execution.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">error(int</samp> <samp class="SANS_Consolas_Regular_11">errorCode)</samp>: Displays the error code, using the format <samp class="SANS_Consolas_Regular_11">ERR</samp><span class="symb-code">&lt;</span><samp class="SANS_Consolas_Regular_11">errorCode</samp><span class="symb-code">&gt;</span>, and halts the program’s execution.</li>
<li class="UL"><samp class="SANS_Consolas_Regular_11">function</samp> <samp class="SANS_Consolas_Regular_11">void</samp> <samp class="SANS_Consolas_Regular_11">wait(int</samp> <samp class="SANS_Consolas_Regular_11">duration)</samp>: Waits approximately <samp class="SANS_Consolas_Regular_11">duration</samp> milliseconds and returns.</li>
</ul>
</section>
</section>
</div>
</body>
</html>